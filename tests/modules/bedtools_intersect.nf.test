nextflow_process {
    name "Test Process BEDTOOLS_INTERSECT"
    script "../../modules/bedtools_intersect.nf"
    process "BEDTOOLS_INTERSECT"
    tag "modules"
    tag "bedtools_intersect"

    test("Should find intersections between breakends and AsiSI sites") {
        when {
            process {
                """
                input[0] = file("${projectDir}/tests/data/test_chr21_AsiSI_sites.bed")
                input[1] = [
                    [ id: "test_intersect" ],
                    file("${projectDir}/tests/data/TestSample1.breakends.bed")
                ]
                """
            }
        }

        then {
            assert process.success
            assert process.out.intersections.size() == 1
            
            def intersection_file = process.out.intersections[0][1]
            assert path(intersection_file).exists()
            
            // Check for proper intersection format
            def lines = path(intersection_file).readLines()
            // Should have intersections since TestSample1 breaks overlap with AsiSI sites
            assert lines.size() >= 1
            
            // First intersection should contain both breakend and AsiSI site info
            if (lines.size() > 0) {
                assert lines[0].split('\t').size() >= 7  // bedtools intersect output format
            }
        }
    }

    test("Should handle no intersections gracefully") {
        setup {
            // Create a breakend file with no overlaps
            def no_overlap_file = file("${workDir}/no_overlap.bed")
            no_overlap_file.text = "chr21\t5000\t5001\tno_overlap_break"
        }

        when {
            process {
                """
                input[0] = file("${projectDir}/tests/data/test_chr21_AsiSI_sites.bed")
                input[1] = [
                    [ id: "test_no_intersect" ],
                    file("${workDir}/no_overlap.bed")
                ]
                """
            }
        }

        then {
            assert process.success
            assert process.out.intersections.size() == 1
            
            def intersection_file = process.out.intersections[0][1]
            assert path(intersection_file).exists()
            
            // Should be empty or minimal content
            def lines = path(intersection_file).readLines()
            // File exists but may be empty (no intersections)
        }
    }
}
