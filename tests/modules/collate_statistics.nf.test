nextflow_process {
    name "Test process COLLATE_STATISTICS"
    script "../../modules/collate_statistics.nf"
    process "COLLATE_STATISTICS"
    tag "modules"
    tag "collate_statistics"

    test ("Should collate multiple count files"){
        setup {
            def count1 = file("${workDir}/Sample1.asisi_counts.tsv")
            count1.text = """chrom\tstart\tend\tcount
chr1\t100\t200\t5
chr1\t300\t400\t3"""

            def merged1 = file("${workDir}/Sample1.merged.bed")
            merged1.text = """chr1\t100\t200\t3
chr1\t300\t400\t3"""
        }

        when {
            process {
                """
                input[0] = [ [ id: 'Sample1' ], file("${workDir}/Sample1.asisi_counts.tsv") ]
                input[1] = [ [ id: 'Sample1' ], file("${workDir}/Sample1.merged.bed") ]
                """
            }
        }

        then {
            assert process.success
            assert process.out.statistics.size() == 1

            def stats_path = process.out.statistics[0][1]
            def stats_file = file(stats_path)
            assert stats_file.exists()

            def lines = stats_file.readLines()
            assert lines.size() == 2  // Header + 1 data line

            def content = stats_file.text
            assert content.contains("Sample1")
            assert content.contains("2")      // Two entries in counts file
            assert content.contains("4.0")    // Mean breaks (5+3)/2
            assert content.contains("3.0")    // Mean merged breakends
        }
    }

    test ("Should handle single count file"){
        setup {
            def single_count = file("${workDir}/SingleSample.asisi_counts.tsv")
            single_count.text = """chrom\tstart\tend\tcount
chr1\t100\t200\t10"""

            def merged = file("${workDir}/SingleSample.merged.bed")
            merged.text = "chr1\t100\t200\t4"
        }

        when {
            process {
                """
                input[0] = [ [ id: 'SingleSample' ], file("${workDir}/SingleSample.asisi_counts.tsv") ]
                input[1] = [ [ id: 'SingleSample' ], file("${workDir}/SingleSample.merged.bed") ]
                """
            }
        }

        then {
            assert process.success
            assert process.out.statistics.size() == 1

            def single_stats_path = process.out.statistics[0][1]
            def single_stats_file = file(single_stats_path)
            assert single_stats_file.exists()

            def single_content = single_stats_file.text
            assert single_content.contains("SingleSample")
            assert single_content.contains("1")      // One entry in counts file
            assert single_content.contains("10.0")   // Single count value
            assert single_content.contains("4.0")    // Single merged breakend value
        }
    }
}